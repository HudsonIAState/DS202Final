}
}
# Assuming 'cleaned_data' is your data frame and 'cols_data' contains the column names
cols_data <- c('Age(years)', "Education", "Gender", "Income", "Race/Ethnicity")
# Get unique values for each column
data1 <- unique(cleaned_data[[cols_data[1]]])
data1 <- data1 <- na.omit(data1)
data2 <- unique(cleaned_data[[cols_data[2]]])
data2 <- data2 <- na.omit(data2)
data3 <- unique(cleaned_data[[cols_data[3]]])
data3 <- data3 <- na.omit(data3)
data4 <- unique(cleaned_data[[cols_data[4]]])
data4 <- data4 <- na.omit(data4)
data5 <- unique(cleaned_data[[cols_data[5]]])
data5 <- data5 <- na.omit(data5)
# Combine all unique values from all columns into a new list
new_cols_data <- list(na.omit(data1), na.omit(data2), na.omit(data3), na.omit(data4), na.omit(data5))
avg_list <- list()
meaning_list <- list()
questions_avg <- list()
for (j in 1:length(unique_qs)) {
for(i in 1:length(cols_data)) {
for(k in 1:length(new_cols_data[[i]])) {
# Extract the data for the current question
question_data <- question_list[[unique_qs[j]]]
# Filter data based on condition, e.g., Gender == "Male"
filtered_data <- question_data %>%
filter(.[[cols_data[i]]] == new_cols_data[[i]][k])
head(filtered_data)
mean_f <- 0
mean_ts <- 0
for(l in 1:length(filtered_data)) {
mean_ts <- mean_ts + filtered_data$Sample_Size
mean_f <- mean_f + filtered_data$Sample_Size[l] * filtered_data$Data_Value[l]
}
avg <- paste0("avg",i,j,k)
avg_list[[avg]] <- (mean_f / mean_ts)
meaning_list[[avg]] <- new_cols_data[[i]][k]
questions_avg[[avg]] <- unique_qs[j]
}
}
}
df <- data.frame(
doubles = unlist(avg_list),
chars = unlist(meaning_list),
chars2 = unlist(questions_avg),
stringsAsFactors = FALSE
)
# Assuming 'cleaned_data' is your data frame and 'cols_data' contains the column names
cols_data <- c('Age(years)', "Education", "Gender", "Income", "Race/Ethnicity")
# Get unique values for each column
data1 <- unique(cleaned_data[[cols_data[1]]])
data1 <- data1 <- na.omit(data1)
data2 <- unique(cleaned_data[[cols_data[2]]])
data2 <- data2 <- na.omit(data2)
data3 <- unique(cleaned_data[[cols_data[3]]])
data3 <- data3 <- na.omit(data3)
data4 <- unique(cleaned_data[[cols_data[4]]])
data4 <- data4 <- na.omit(data4)
data5 <- unique(cleaned_data[[cols_data[5]]])
data5 <- data5 <- na.omit(data5)
# Combine all unique values from all columns into a new list
new_cols_data <- list(na.omit(data1), na.omit(data2), na.omit(data3), na.omit(data4), na.omit(data5))
avg_list <- list()
meaning_list <- list()
questions_avg <- list()
for (j in 1:length(unique_qs)) {
for(i in 1:length(cols_data)) {
for(k in 1:length(new_cols_data[[i]])) {
# Extract the data for the current question
question_data <- question_list[[unique_qs[j]]]
# Filter data based on condition, e.g., Gender == "Male"
filtered_data <- question_data %>%
filter(.[[cols_data[i]]] == new_cols_data[[i]][k])
head(filtered_data)
mean_f <- 0
mean_ts <- 0
for(l in 1:length(filtered_data)) {
mean_ts <- mean_ts + filtered_data$Sample_Size
mean_f <- mean_f + filtered_data$Sample_Size[l] * filtered_data$Data_Value[l]
}
avg <- paste0("avg",i,j,k)
print(mean_f)
avg_list[[avg]] <- (mean_f / mean_ts)
meaning_list[[avg]] <- new_cols_data[[i]][k]
questions_avg[[avg]] <- unique_qs[j]
}
}
}
df <- data.frame(
doubles = unlist(avg_list),
chars = unlist(meaning_list),
chars2 = unlist(questions_avg),
stringsAsFactors = FALSE
)
# Assuming 'cleaned_data' is your data frame and 'cols_data' contains the column names
cols_data <- c('Age(years)', "Education", "Gender", "Income", "Race/Ethnicity")
# Get unique values for each column
data1 <- unique(cleaned_data[[cols_data[1]]])
data1 <- data1 <- na.omit(data1)
data2 <- unique(cleaned_data[[cols_data[2]]])
data2 <- data2 <- na.omit(data2)
data3 <- unique(cleaned_data[[cols_data[3]]])
data3 <- data3 <- na.omit(data3)
data4 <- unique(cleaned_data[[cols_data[4]]])
data4 <- data4 <- na.omit(data4)
data5 <- unique(cleaned_data[[cols_data[5]]])
data5 <- data5 <- na.omit(data5)
# Combine all unique values from all columns into a new list
new_cols_data <- list(na.omit(data1), na.omit(data2), na.omit(data3), na.omit(data4), na.omit(data5))
avg_list <- list()
meaning_list <- list()
questions_avg <- list()
for (j in 1:length(unique_qs)) {
for(i in 1:length(cols_data)) {
for(k in 1:length(new_cols_data[[i]])) {
# Extract the data for the current question
question_data <- question_list[[unique_qs[j]]]
# Filter data based on condition, e.g., Gender == "Male"
filtered_data <- question_data %>%
filter(.[[cols_data[i]]] == new_cols_data[[i]][k])
head(filtered_data)
mean_f <- 0
mean_ts <- 0
for(l in 1:length(filtered_data)) {
mean_ts <- mean_ts + filtered_data$Sample_Size
mean_f <- mean_f + filtered_data$Sample_Size[l] * filtered_data$Data_Value[l]
}
avg <- paste0("avg",i,j,k)
print(mean_ts)
avg_list[[avg]] <- (mean_f / mean_ts)
meaning_list[[avg]] <- new_cols_data[[i]][k]
questions_avg[[avg]] <- unique_qs[j]
}
}
}
df <- data.frame(
doubles = unlist(avg_list),
chars = unlist(meaning_list),
chars2 = unlist(questions_avg),
stringsAsFactors = FALSE
)
# Assuming 'cleaned_data' is your data frame and 'cols_data' contains the column names
cols_data <- c('Age(years)', "Education", "Gender", "Income", "Race/Ethnicity")
# Get unique values for each column
data1 <- unique(cleaned_data[[cols_data[1]]])
data1 <- data1 <- na.omit(data1)
data2 <- unique(cleaned_data[[cols_data[2]]])
data2 <- data2 <- na.omit(data2)
data3 <- unique(cleaned_data[[cols_data[3]]])
data3 <- data3 <- na.omit(data3)
data4 <- unique(cleaned_data[[cols_data[4]]])
data4 <- data4 <- na.omit(data4)
data5 <- unique(cleaned_data[[cols_data[5]]])
data5 <- data5 <- na.omit(data5)
# Combine all unique values from all columns into a new list
new_cols_data <- list(na.omit(data1), na.omit(data2), na.omit(data3), na.omit(data4), na.omit(data5))
avg_list <- list()
meaning_list <- list()
questions_avg <- list()
for (j in 1:length(unique_qs)) {
for(i in 1:length(cols_data)) {
for(k in 1:length(new_cols_data[[i]])) {
# Extract the data for the current question
question_data <- question_list[[unique_qs[j]]]
# Filter data based on condition, e.g., Gender == "Male"
filtered_data <- question_data %>%
filter(.[[cols_data[i]]] == new_cols_data[[i]][k])
head(filtered_data)
mean_f <- 0
mean_ts <- 0
for(l in 1:length(filtered_data)) {
mean_ts <- mean_ts + filtered_data$Sample_Size[l]
mean_f <- mean_f + filtered_data$Sample_Size[l] * filtered_data$Data_Value[l]
}
avg <- paste0("avg",i,j,k)
print(mean_ts)
avg_list[[avg]] <- (mean_f / mean_ts)
meaning_list[[avg]] <- new_cols_data[[i]][k]
questions_avg[[avg]] <- unique_qs[j]
}
}
}
df <- data.frame(
doubles = unlist(avg_list),
chars = unlist(meaning_list),
chars2 = unlist(questions_avg),
stringsAsFactors = FALSE
)
obesity_rates <- df %>%
filter(chars2 == unique_qs[1])
filtered_df <- obesity_rates %>%
arrange(desc(doubles))
head(filtered_df, 10)
# Assuming 'cleaned_data' is your data frame and 'cols_data' contains the column names
cols_data <- c('Age(years)', "Education", "Gender", "Income", "Race/Ethnicity")
# Get unique values for each column
data1 <- unique(cleaned_data[[cols_data[1]]])
data1 <- data1 <- na.omit(data1)
data2 <- unique(cleaned_data[[cols_data[2]]])
data2 <- data2 <- na.omit(data2)
data3 <- unique(cleaned_data[[cols_data[3]]])
data3 <- data3 <- na.omit(data3)
data4 <- unique(cleaned_data[[cols_data[4]]])
data4 <- data4 <- na.omit(data4)
data5 <- unique(cleaned_data[[cols_data[5]]])
data5 <- data5 <- na.omit(data5)
# Combine all unique values from all columns into a new list
new_cols_data <- list(na.omit(data1), na.omit(data2), na.omit(data3), na.omit(data4), na.omit(data5))
avg_list <- list()
meaning_list <- list()
questions_avg <- list()
for (j in 1:length(unique_qs)) {
for(i in 1:length(cols_data)) {
for(k in 1:length(new_cols_data[[i]])) {
# Extract the data for the current question
question_data <- question_list[[unique_qs[j]]]
# Filter data based on condition, e.g., Gender == "Male"
filtered_data <- question_data %>%
filter(.[[cols_data[i]]] == new_cols_data[[i]][k])
head(filtered_data)
mean_f <- 0
mean_ts <- 0
for(l in 1:length(filtered_data)) {
mean_ts <- mean_ts + filtered_data$Sample_Size[l]
mean_f <- mean_f + filtered_data$Sample_Size[l] * filtered_data$Data_Value[l]
}
avg <- paste0("avg",i,j,k)
print(mean_ts)
avg_list[[avg]] <- (mean_f / mean_ts)
meaning_list[[avg]] <- new_cols_data[[i]][k]
questions_avg[[avg]] <- unique_qs[j]
}
}
}
df <- data.frame(
doubles = unlist(avg_list),
chars = unlist(meaning_list),
chars2 = unlist(questions_avg),
stringsAsFactors = FALSE
)
obesity_rates <- df %>%
filter(chars2 == unique_qs[1])
filtered_df <- obesity_rates %>%
arrange(doubles)
head(filtered_df, 10)
# Assuming 'cleaned_data' is your data frame and 'cols_data' contains the column names
cols_data <- c('Age(years)', "Education", "Gender", "Income", "Race/Ethnicity")
# Get unique values for each column
data1 <- unique(cleaned_data[[cols_data[1]]])
data1 <- data1 <- na.omit(data1)
data2 <- unique(cleaned_data[[cols_data[2]]])
data2 <- data2 <- na.omit(data2)
data3 <- unique(cleaned_data[[cols_data[3]]])
data3 <- data3 <- na.omit(data3)
data4 <- unique(cleaned_data[[cols_data[4]]])
data4 <- data4 <- na.omit(data4)
data5 <- unique(cleaned_data[[cols_data[5]]])
data5 <- data5 <- na.omit(data5)
# Combine all unique values from all columns into a new list
new_cols_data <- list(na.omit(data1), na.omit(data2), na.omit(data3), na.omit(data4), na.omit(data5))
avg_list <- list()
meaning_list <- list()
questions_avg <- list()
for (j in 1:length(unique_qs)) {
for(i in 1:length(cols_data)) {
for(k in 1:length(new_cols_data[[i]])) {
# Extract the data for the current question
question_data <- question_list[[unique_qs[j]]]
# Filter data based on condition, e.g., Gender == "Male"
filtered_data <- question_data %>%
filter(.[[cols_data[i]]] == new_cols_data[[i]][k])
head(filtered_data)
mean_f <- 0
mean_ts <- 0
for(l in 1:length(filtered_data)) {
mean_ts <- mean_ts + filtered_data$Sample_Size[l]
mean_f <- mean_f + filtered_data$Sample_Size[l] * filtered_data$Data_Value[l]
}
avg <- paste0("avg",i,j,k)
avg_list[[avg]] <- (mean_f / mean_ts)
meaning_list[[avg]] <- new_cols_data[[i]][k]
questions_avg[[avg]] <- unique_qs[j]
}
}
}
df <- data.frame(
doubles = unlist(avg_list),
chars = unlist(meaning_list),
chars2 = unlist(questions_avg),
stringsAsFactors = FALSE
)
obesity_rates <- df %>%
filter(chars2 == unique_qs[1])
filtered_df <- obesity_rates %>%
arrange(doubles)
head(filtered_df, 10)
# Assuming 'cleaned_data' is your data frame and 'cols_data' contains the column names
cols_data <- c('Age(years)', "Education", "Gender", "Income", "Race/Ethnicity")
# Get unique values for each column
data1 <- unique(cleaned_data[[cols_data[1]]])
data1 <- data1 <- na.omit(data1)
data2 <- unique(cleaned_data[[cols_data[2]]])
data2 <- data2 <- na.omit(data2)
data3 <- unique(cleaned_data[[cols_data[3]]])
data3 <- data3 <- na.omit(data3)
data4 <- unique(cleaned_data[[cols_data[4]]])
data4 <- data4 <- na.omit(data4)
data5 <- unique(cleaned_data[[cols_data[5]]])
data5 <- data5 <- na.omit(data5)
# Combine all unique values from all columns into a new list
new_cols_data <- list(na.omit(data1), na.omit(data2), na.omit(data3), na.omit(data4), na.omit(data5))
avg_list <- list()
meaning_list <- list()
questions_avg <- list()
for (j in 1:length(unique_qs)) {
for(i in 1:length(cols_data)) {
for(k in 1:length(new_cols_data[[i]])) {
# Extract the data for the current question
question_data <- question_list[[unique_qs[j]]]
# Filter data based on condition, e.g., Gender == "Male"
filtered_data <- question_data %>%
filter(.[[cols_data[i]]] == new_cols_data[[i]][k])
head(filtered_data)
mean_f <- 0
mean_ts <- 0
for(l in 1:length(filtered_data)) {
mean_ts <- mean_ts + filtered_data$Sample_Size[l]
mean_f <- mean_f + filtered_data$Sample_Size[l] * filtered_data$Data_Value[l]
}
avg <- paste0("avg",i,j,k)
avg_list[[avg]] <- (mean_f / mean_ts)
meaning_list[[avg]] <- new_cols_data[[i]][k]
questions_avg[[avg]] <- unique_qs[j]
}
}
}
df <- data.frame(
doubles = unlist(avg_list),
chars = unlist(meaning_list),
chars2 = unlist(questions_avg),
stringsAsFactors = FALSE
)
obesity_rates <- df %>%
filter(chars2 == unique_qs[1])
filtered_df <- obesity_rates %>%
arrange(desc(doubles))
head(filtered_df, 10)
View(cleaned_data)
# Load necessary libraries
library(dplyr)
library(ggplot2)
# Summarize the data by YearStart
yearly_data <- question_data %>%
group_by(YearStart) %>%
summarise(mean_data_value = mean(Data_Value, na.rm = TRUE),
total_sample_size = sum(Sample_Size, na.rm = TRUE))
# View the summarized data
head(yearly_data)
# Check if the data shows a significant change over time using a linear regression
model <- lm(mean_data_value ~ YearStart, data = yearly_data)
summary(model)
# Plot the trend over time
ggplot(yearly_data, aes(x = YearStart, y = mean_data_value)) +
geom_line() +
geom_point() +
labs(title = "Trends in Health Metrics Over Time",
x = "Year", y = "Average Data Value (Health Metric)") +
theme_minimal()
years_df <- cleaned_data %>% group_by(YearStart)
head(years_df)
years_df <- cleaned_data %>% group_by(YearStart) %>% filter(.[[Question]] == unique_qs[1])
years_df <- cleaned_data %>% group_by(YearStart) %>% filter(Question == unique_qs[1])
head(years_df)
years_df <- cleaned_data %>% group_by(YearStart) %>% filter(Question == unique_qs[2])
head(years_df)
years_df <- cleaned_data %>% group_by(YearStart) %>% filter(Question == unique_qs[1])
head(years_df)
years_df <- cleaned_data %>% group_by(YearStart == 2012) %>% filter(Question == unique_qs[1])
head(years_df)
years_df <- cleaned_data %>% group_by(YearStart == '2012') %>% filter(Question == unique_qs[1])
head(years_df)
years_df <- cleaned_data %>% group_by(YearStart) %>% filter(Question == unique_qs[1])
head(years_df)
years_df <- cleaned_data %>% mean(Data_Value) %>% group_by(YearStart) %>% filter(Question == unique_qs[1])
years_df <- cleaned_data %>% group_by(YearStart) %>%  mean(Data_Value) %>% filter(Question == unique_qs[1])
years_df <- cleaned_data %>% group_by(YearStart) %>% summarize(bruh = mean(Data_Value)) %>% filter(Question == unique_qs[1])
years_df <- cleaned_data %>% group_by(YearStart) %>% filter(Question == unique_qs[1]) %>% summarize(bruh = mean(Data_Value))
head(years_df)
years_df <- cleaned_data %>% group_by(YearStart) %>% filter(Question == unique_qs[1]) %>% summarize(bruh = mean(Data_Value))
head(years_df, 12)
years_df <- cleaned_data %>% group_by(YearStart) %>% filter(Question == unique_qs[1]) %>% summarize(bruh = mean(Data_Value))
head(years_df, 12)
ggplot(data, aes(x = YearStart, y = Data_Value)) +
geom_line(color = "blue", size = 1) +  # Line color and thickness
geom_point(color = "red", size = 3) +  # Points at each data point
labs(title = "Health Metric Trend Over Time",
x = "Year", y = "Data Value") +
theme_minimal()  # Minimal theme for the plot
years_df <- cleaned_data %>% group_by(YearStart) %>% filter(Question == unique_qs[1]) %>% summarize(bruh = mean(Data_Value))
head(years_df, 12)
ggplot(years_df, aes(x = YearStart, y = bruh)) +
geom_line(color = "blue", size = 1) +  # Line color and thickness
geom_point(color = "red", size = 3) +  # Points at each data point
labs(title = "Health Metric Trend Over Time",
x = "Year", y = "Data Value") +
theme_minimal()  # Minimal theme for the plot
years_df <- cleaned_data %>% group_by(YearStart) %>% filter(Question == unique_qs[1]) %>% summarize(bruh = mean(Data_Value))
head(years_df, 12)
ggplot(years_df, aes(x = YearStart, y = bruh)) +
geom_line(color = "orange", size = 1) +  # Line color and thickness
geom_point(color = "purple", size = 3) +  # Points at each data point
labs(title = "Health Metric Trend Over Time",
x = "Year", y = "Data Value") +
theme_minimal()  # Minimal theme for the plot
years_df <- cleaned_data %>% group_by(YearStart) %>% filter(Question == unique_qs[1]) %>% summarize(bruh = mean(Data_Value))
head(years_df, 12)
ggplot(years_df, aes(x = YearStart, y = bruh)) +
geom_line(color = "orange", size = 1) +  # Line color and thickness
geom_point(color = "purple", size = 3) +  # Points at each data point
labs(title = "Obesity Percentage Trend Over Time",
x = "Year", y = "Data Value") +
theme_minimal()  # Minimal theme for the plot
years_df <- cleaned_data %>% group_by(YearStart) %>% filter(Question == unique_qs[1]) %>% summarize(bruh = mean(Data_Value))
head(years_df, 12)
ggplot(years_df, aes(x = YearStart, y = bruh)) +
geom_line(color = "orange", size = 1) +  # Line color and thickness
geom_point(color = "purple", size = 3) +  # Points at each data point
labs(title = "Obesity Percentage Trend Over Time",
x = "Year", y = "Data Value") +
scale_x_continuous(breaks = data$YearStart) +
theme_minimal()  # Minimal theme for the plot
# Assuming your data frame is called `health_data`
# Correlation between income and obesity
cor(health_data$Income, health_data$Obesity, method = "pearson")  # "pearson" is for continuous variables
View(years_df)
plot(bruh ~ YearStart)
plot(bruh ~ YearStart, data = years_df)
plot(bruh ~ YearStart, data = years_df)
fnaf <- aov(bruh ~ YearStart, data = years_df)
plot(bruh ~ YearStart, data = years_df)
fnaf <- aov(bruh ~ YearStart, data = years_df)
summary(fnaf)
View(filtered_df)
View(averages)
View(age_18_24_data)
View(abo)
View(data)
socio <- new_cols_data[[2]] %<% filter(Question == unique_qs[1])
socio <- new_cols_data[[2]] %>% filter(Question == unique_qs[1])
socio <- new_cols_data[2] %>% filter(Question == unique_qs[1])
socio <- cleaned_data %>% group_by(Income) %>% filter(Question == unique_qs[1])
plot(bruh ~ YearStart, data = years_df)
fnaf <- aov(bruh ~ YearStart, data = years_df)
summary(fnaf)
socio <- cleaned_data %>% group_by(Income) %>% filter(Question == unique_qs[1])
head(socio)
socio <- cleaned_data %>% group_by(Income) %>% filter(Question == unique_qs[1] & Income != NA)
head(socio)
socio <- cleaned_data %>% group_by(Income) %>% filter(Question == unique_qs[1] & !is.na(Income))
head(socio)
socio <- cleaned_data %>% group_by(Income) %>% filter(Question == unique_qs[1] & !is.na(Income)) %>% summarize(Data_Value = sum(Data_Value), Sample_Size = sum(Sample_Size))
head(socio)
socio <- cleaned_data %>% group_by(Income) %>% filter(Question == unique_qs[1] & !is.na(Income) & Income != "Data not reported") %>% summarize(Data_Value = sum(Data_Value), Sample_Size = sum(Sample_Size))
head(socio)
socio <- cleaned_data %>% group_by(Income) %>% filter(Question == unique_qs[1] & !is.na(Income) & Income != "Data not reported") %>% summarize(Data_Value = sum(Data_Value), Sample_Size = sum(Sample_Size))
head(socio, 10)
socio <- cleaned_data %>% group_by(Income) %>% filter(Question == unique_qs[1] & !is.na(Income) & Income != "Data not reported") %>% summarize(Data_Value = sum(Data_Value), Sample_Size = sum(Sample_Size))
head(socio)
socio <- cleaned_data %>% group_by(Income) %>% filter(Question == unique_qs[1] & !is.na(Income) & Income != "Data not reported") %>% summarize(Data_Value = sum(Data_Value / sum(Sample_Size)), Sample_Size = sum(Sample_Size))
head(socio)
socio <- cleaned_data %>% group_by(Income) %>% filter(Question == unique_qs[1] & !is.na(Income) & Income != "Data not reported") %>% summarize(Data_Value = sum(Data_Value), Sample_Size = sum(Sample_Size))
head(socio)
socio <- cleaned_data %>% group_by(Income) %>% filter(Question == unique_qs[1] & !is.na(Income) & Income != "Data not reported") %>% summarize(Data_Value = sum(Data_Value * Sample_Size), Sample_Size = sum(Sample_Size))
head(socio)
socio <- cleaned_data %>% group_by(Income) %>% filter(Question == unique_qs[1] & !is.na(Income) & Income != "Data not reported") %>% summarize(Data_Value = sum((Data_Value * Sample_Size)) / sum(Sample_Size) , Sample_Size = sum(Sample_Size))
head(socio)
socio <- cleaned_data %>% group_by(Income) %>% filter(Question == unique_qs[1] & !is.na(Income) & Income != "Data not reported") %>% summarize(Data_Value = sum((Data_Value * Sample_Size)) / sum(Sample_Size) , Sample_Size = sum(Sample_Size))
head(arrange(desc(socio)))
socio <- cleaned_data %>% group_by(Income) %>% filter(Question == unique_qs[1] & !is.na(Income) & Income != "Data not reported") %>% summarize(Data_Value = sum((Data_Value * Sample_Size)) / sum(Sample_Size) , Sample_Size = sum(Sample_Size))
head(socio)
socio <- cleaned_data %>% group_by(Income) %>% filter(Question == unique_qs[1] & !is.na(Income) & Income != "Data not reported") %>% summarize(Data_Value = sum((Data_Value * Sample_Size)) / sum(Sample_Size) , Sample_Size = sum(Sample_Size))
arrange(socio)
head(socio)
socio <- cleaned_data %>% group_by(Income) %>% filter(Question == unique_qs[1] & !is.na(Income) & Income != "Data not reported") %>% summarize(Data_Value = sum((Data_Value * Sample_Size)) / sum(Sample_Size) , Sample_Size = sum(Sample_Size))
socio_o <- socio %>% arrange(socio)
head(socio_o)
socio <- cleaned_data %>% group_by(Income) %>% filter(Question == unique_qs[1] & !is.na(Income) & Income != "Data not reported") %>% summarize(Data_Value = sum((Data_Value * Sample_Size)) / sum(Sample_Size) , Sample_Size = sum(Sample_Size))
socio_o <- socio %>% arrange(socio$Data_Value)
head(socio_o)
socio <- cleaned_data %>% group_by(Income) %>% filter(Question == unique_qs[1] & !is.na(Income) & Income != "Data not reported") %>% summarize(Data_Value = sum((Data_Value * Sample_Size)) / sum(Sample_Size) , Sample_Size = sum(Sample_Size))
socio_o <- socio %>% arrange(desc(socio$Data_Value)
head(socio_o)
socio <- cleaned_data %>% group_by(Income) %>% filter(Question == unique_qs[1] & !is.na(Income) & Income != "Data not reported") %>% summarize(Data_Value = sum((Data_Value * Sample_Size)) / sum(Sample_Size) , Sample_Size = sum(Sample_Size))
socio_o <- socio %>% arrange(desc(socio$Data_Value))
head(socio_o)
# Filter the data to remove missing or invalid values
socio_f <- cleaned_data %>%
filter(Question == unique_qs[1] & !is.na(Income) & Income != "Data not reported")
# Create a box plot of Data_Value for each Income level
library(ggplot2)
ggplot(socio_f, aes(x = Income, y = Data_Value)) +
geom_boxplot() +
labs(
title = "Box Plot of Data Values by Income",
x = "Income Level",
y = "Data Value"
) +
theme(axis.text.x = element_text(angle = 45, hjust = 1))  # Rotate x-axis labels for better readability
socio <- cleaned_data %>% group_by(Income) %>% filter(Question == unique_qs[1] & !is.na(Income) & Income != "Data not reported") %>% summarize(Data_Value = sum((Data_Value * Sample_Size)) / sum(Sample_Size) , Sample_Size = sum(Sample_Size))
socio_o <- socio %>% arrange(desc(socio$Data_Value))
head(socio_o)
